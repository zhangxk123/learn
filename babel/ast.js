NodePath {
  contexts:
   [ TraversalContext {
       queue: [Array],
       parentPath: [NodePath],
       scope: [Scope],
       state: undefined,
       opts: [Object],
       priorityQueue: [] } ],
  state: undefined,
  opts:
   { Identifier: { enter: [Array], exit: [Array] },
     _exploded: {},
     _verified: {},
     BlockStatement: { exit: [Array] },
     Program: { exit: [Array] },
     TSModuleBlock: { exit: [Array] } },
  _traverseFlags: 0,
  skipKeys: null,
  parentPath:
   NodePath {
     contexts: [ [TraversalContext] ],
     state: undefined,
     opts:
      { Identifier: [Object],
        _exploded: {},
        _verified: {},
        BlockStatement: [Object],
        Program: [Object],
        TSModuleBlock: [Object] },
     _traverseFlags: 0,
     skipKeys: null,
     parentPath:
      NodePath {
        contexts: [Array],
        state: undefined,
        opts: [Object],
        _traverseFlags: 0,
        skipKeys: null,
        parentPath: [NodePath],
        container: [Array],
        listKey: 'body',
        key: 0,
        node: [Node],
        type: 'ExpressionStatement',
        parent: [Node],
        hub: [Object],
        data: null,
        context: [TraversalContext],
        scope: [Scope] },
     container:
      Node {
        type: 'ExpressionStatement',
        start: 11,
        end: 15,
        loc: [SourceLocation],
        range: undefined,
        leadingComments: [Array],
        trailingComments: undefined,
        innerComments: undefined,
        extra: undefined,
        expression: [Node] },
     listKey: undefined,
     key: 'expression',
     node:
      Node {
        type: 'AssignmentExpression',
        start: 11,
        end: 14,
        loc: [SourceLocation],
        range: undefined,
        trailingComments: undefined,
        innerComments: undefined,
        extra: undefined,
        operator: '=',
        left: [Node],
        right: [Node],
        leadingComments: undefined },
     type: 'AssignmentExpression',
     parent:
      Node {
        type: 'ExpressionStatement',
        start: 11,
        end: 15,
        loc: [SourceLocation],
        range: undefined,
        leadingComments: [Array],
        trailingComments: undefined,
        innerComments: undefined,
        extra: undefined,
        expression: [Node] },
     hub:
      { file: [File],
        getCode: [Function: getCode],
        getScope: [Function: getScope],
        addHelper: [Function: bound addHelper],
        buildError: [Function: bound buildCodeFrameError] },
     data: null,
     context:
      TraversalContext {
        queue: [Array],
        parentPath: [NodePath],
        scope: [Scope],
        state: undefined,
        opts: [Object],
        priorityQueue: [] },
     scope:
      Scope {
        uid: 0,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        inited: true,
        references: [Object: null prototype] {},
        bindings: [Object: null prototype] {},
        globals: [Object],
        uids: [Object: null prototype] {},
        data: [Object: null prototype] {},
        crawling: false } },
  container:
   Node {
     type: 'AssignmentExpression',
     start: 11,
     end: 14,
     loc:
      SourceLocation {
        start: [Position],
        end: [Position],
        filename: undefined,
        identifierName: undefined },
     range: undefined,
     trailingComments: undefined,
     innerComments: undefined,
     extra: undefined,
     operator: '=',
     left:
      Node {
        type: 'Identifier',
        start: 11,
        end: 12,
        loc: [SourceLocation],
        range: undefined,
        trailingComments: undefined,
        innerComments: undefined,
        extra: undefined,
        name: 'a',
        leadingComments: undefined },
     right:
      Node {
        type: 'NumericLiteral',
        start: 13,
        end: 14,
        loc: [SourceLocation],
        range: undefined,
        leadingComments: undefined,
        trailingComments: undefined,
        innerComments: undefined,
        extra: [Object],
        value: 1 },
     leadingComments: undefined },
  listKey: undefined,
  key: 'left',
  node:
   Node {
     type: 'Identifier',
     start: 11,
     end: 12,
     loc:
      SourceLocation {
        start: [Position],
        end: [Position],
        filename: undefined,
        identifierName: 'a' },
     range: undefined,
     trailingComments: undefined,
     innerComments: undefined,
     extra: undefined,
     name: 'a',
     leadingComments: undefined },
  type: 'Identifier',
  parent:
   Node {
     type: 'AssignmentExpression',
     start: 11,
     end: 14,
     loc:
      SourceLocation {
        start: [Position],
        end: [Position],
        filename: undefined,
        identifierName: undefined },
     range: undefined,
     trailingComments: undefined,
     innerComments: undefined,
     extra: undefined,
     operator: '=',
     left:
      Node {
        type: 'Identifier',
        start: 11,
        end: 12,
        loc: [SourceLocation],
        range: undefined,
        trailingComments: undefined,
        innerComments: undefined,
        extra: undefined,
        name: 'a',
        leadingComments: undefined },
     right:
      Node {
        type: 'NumericLiteral',
        start: 13,
        end: 14,
        loc: [SourceLocation],
        range: undefined,
        leadingComments: undefined,
        trailingComments: undefined,
        innerComments: undefined,
        extra: [Object],
        value: 1 },
     leadingComments: undefined },
  hub:
   { file:
      File {
        _map: Map {},
        opts: [Object],
        declarations: {},
        path: [NodePath],
        ast: [Node],
        scope: [Scope],
        metadata: {},
        code: '// #ifdef\r\na=1;',
        inputMap: null,
        hub: [Circular] },
     getCode: [Function: getCode],
     getScope: [Function: getScope],
     addHelper: [Function: bound addHelper],
     buildError: [Function: bound buildCodeFrameError] },
  data: null,
  context:
   TraversalContext {
     queue: [ [Circular] ],
     parentPath:
      NodePath {
        contexts: [Array],
        state: undefined,
        opts: [Object],
        _traverseFlags: 0,
        skipKeys: null,
        parentPath: [NodePath],
        container: [Node],
        listKey: undefined,
        key: 'expression',
        node: [Node],
        type: 'AssignmentExpression',
        parent: [Node],
        hub: [Object],
        data: null,
        context: [TraversalContext],
        scope: [Scope] },
     scope:
      Scope {
        uid: 0,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        inited: true,
        references: [Object: null prototype] {},
        bindings: [Object: null prototype] {},
        globals: [Object],
        uids: [Object: null prototype] {},
        data: [Object: null prototype] {},
        crawling: false },
     state: undefined,
     opts:
      { Identifier: [Object],
        _exploded: {},
        _verified: {},
        BlockStatement: [Object],
        Program: [Object],
        TSModuleBlock: [Object] },
     priorityQueue: [] },
  scope:
   Scope {
     uid: 0,
     block:
      Node {
        type: 'Program',
        start: 0,
        end: 15,
        loc: [SourceLocation],
        range: undefined,
        leadingComments: undefined,
        trailingComments: undefined,
        innerComments: undefined,
        extra: undefined,
        sourceType: 'module',
        interpreter: null,
        body: [Array],
        directives: [] },
     path:
      NodePath {
        contexts: [Array],
        state: undefined,
        opts: [Object],
        _traverseFlags: 0,
        skipKeys: null,
        parentPath: null,
        container: [Node],
        listKey: undefined,
        key: 'program',
        node: [Node],
        type: 'Program',
        parent: [Node],
        hub: [Object],
        data: null,
        context: [TraversalContext],
        scope: [Circular] },
     labels: Map {},
     inited: true,
     references: [Object: null prototype] {},
     bindings: [Object: null prototype] {},
     globals: [Object: null prototype] { a: [Node] },
     uids: [Object: null prototype] {},
     data: [Object: null prototype] {},
     crawling: false } }
